CREATE TABLE [room] (
  [id] int IDENTITY(1,1) PRIMARY KEY NOT NULL,
  [room_empty] nvarchar(30) NOT NULL,
  [number_of_places] int NOT NULL,
  [classID] int NOT NULL
)
GO

CREATE TABLE [class] (
  [id] int IDENTITY(1,1) PRIMARY KEY NOT NULL,
  [name] nvarchar(30) NOT NULL,
  [cost] money NOT NULL
)
GO

ALTER TABLE [room] ADD FOREIGN KEY ([classID]) REFERENCES [class] ([id])
GO

INSERT class
   (name, cost)  
VALUES  
   ('Эконом', 2000.00),
   ('Бизнес', 5000.00),
   ('Люкс', 8000.00);

INSERT room
   (room_empty, number_of_places, classID)  
VALUES  
   ('свободна', 1, 1),
   ('занята', 2, 1),
   ('занята', 2, 1),
   ('занята', 1, 2),
   ('свободна', 2, 2),
   ('свободна', 2, 3);
  
  SELECT * FROM class
  SELECT * FROM room

  --        Вывести список свободных комнат (номер, класс), отсортированных по стоимости аренды.
  SELECT room.id, class.name, class.cost FROM class, room WHERE room.room_empty = 'свободна' AND room.classID = class.id ORDER BY class.cost;

--         Рассчитать ежедневную прибыль отеля.
  SELECT SUM(class.cost) AS 'Прибыль за сегодня' FROM class, room WHERE room.room_empty = 'занята' AND room.classID = class.id;

--        Рассчитать загруженность отеля (отношение числа сданных к общему числу комнат).
  SELECT CAST(SUM(case room.room_empty when 'занята' then 1 else 0 end) AS float)/COUNT(room.id) AS 'Загруженность отеля' FROM room;
  
--        Вывести пары: {класс, общее число комнат}

SELECT class.name AS 'Класс', COUNT(room.id) AS 'Общее количество комнат' FROM class, room WHERE room.classID = class.id GROUP BY class.name ORDER BY COUNT(room.id)

--       Извлечь самую дорогую свободную комнату, пометить как занятую.
SELECT TOP (1) room.id FROM room, class WHERE room.classID = class.id AND room.room_empty = 'свободна' AND class.cost = (SELECT MAX(class.cost) FROM class)

SELECT * FROM room
--         Найти самую дешёвую в расчёте на человека комнату и превратить её в Люксовую.

SELECT TOP (1) room.id, CAST(class.cost AS float)/room.number_of_places AS s FROM class, room WHERE room.classID = class.id ORDER BY s

SELECT * FROM room
--       Найти самый занятый постояльцами класс (отношение числа занятых комнат к общему числу комнат в классе) и добавить в отель новую комнату этого класса.

  SELECT TOP (1) class.id, CAST(SUM(case room.room_empty when 'занята' then 1 else 0 end) AS float)/COUNT(room.id) AS w FROM room, class WHERE room.classID = class.id GROUP BY class.name, class.id ORDER BY w DESC;
